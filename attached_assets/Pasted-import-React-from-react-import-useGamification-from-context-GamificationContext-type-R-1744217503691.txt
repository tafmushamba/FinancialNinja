import React from 'react';
import { useGamification } from '../context/GamificationContext';

type RewardsMarketplaceProps = {
  className?: string;
}

// Mock rewards data - in a real app, this would come from the backend
const mockRewardsData = [
  {
    id: 'costa',
    brand: 'Costa Coffee',
    title: '£5 Costa Coffee Gift Card',
    description: 'Enjoy a coffee break on us with this £5 Costa Coffee gift card.',
    points: 500,
    icon: '☕',
    category: 'Dining'
  },
  {
    id: 'tesco',
    brand: 'Tesco',
    title: '£10 Tesco Gift Card',
    description: 'Use this £10 gift card at any Tesco store across the UK.',
    points: 1000,
    icon: '🛒',
    category: 'Shopping'
  },
  {
    id: 'vue',
    brand: 'Vue Cinema',
    title: 'Vue Cinema Ticket',
    description: 'One standard ticket for any film at Vue Cinemas nationwide.',
    points: 1200,
    icon: '🎬',
    category: 'Entertainment'
  },
  {
    id: 'spotify',
    brand: 'Spotify',
    title: '1 Month Spotify Premium',
    description: 'Enjoy ad-free music streaming for one month with Spotify Premium.',
    points: 1500,
    icon: '🎵',
    category: 'Entertainment'
  },
  {
    id: 'amazon',
    brand: 'Amazon',
    title: '£15 Amazon Gift Card',
    description: 'Shop for anything on Amazon with this £15 gift card.',
    points: 1500,
    icon: '🛍️',
    category: 'Shopping'
  },
  {
    id: 'deliveroo',
    brand: 'Deliveroo',
    title: '£15 Deliveroo Voucher',
    description: 'Order your favorite food with this £15 Deliveroo voucher.',
    points: 1500,
    icon: '🍔',
    category: 'Dining'
  },
  {
    id: 'appstore',
    brand: 'App Store',
    title: '£10 App Store & iTunes Gift Card',
    description: 'Purchase apps, games, music, and more with this £10 gift card.',
    points: 1000,
    icon: '📱',
    category: 'Entertainment'
  },
  {
    id: 'marks',
    brand: 'Marks & Spencer',
    title: '£25 M&S Gift Card',
    description: 'Shop for clothing, food, and homeware with this £25 M&S gift card.',
    points: 2500,
    icon: '🛍️',
    category: 'Shopping'
  }
];

// Group rewards by category
const groupedRewards = mockRewardsData.reduce((acc, reward) => {
  if (!acc[reward.category]) {
    acc[reward.category] = [];
  }
  acc[reward.category].push(reward);
  return acc;
}, {} as Record<string, typeof mockRewardsData>);

const RewardsMarketplace: React.FC<RewardsMarketplaceProps> = ({ className = '' }) => {
  const { points } = useGamification();
  const [selectedCategory, setSelectedCategory] = React.useState<string | null>(null);
  
  const categories = Object.keys(groupedRewards);
  const displayRewards = selectedCategory 
    ? groupedRewards[selectedCategory] 
    : mockRewardsData;
  
  return (
    <div className={className}>
      <div className="flex justify-between items-center mb-8">
        <h2 className="text-2xl font-bold">Rewards Marketplace</h2>
        <div className="flex items-center bg-htb-card px-4 py-2 rounded-lg border border-htb-border">
          <span className="text-htb-green font-bold mr-2">{points}</span>
          <span className="text-gray-400">points available</span>
        </div>
      </div>
      
      <div className="flex mb-6 overflow-x-auto pb-2">
        <button 
          className={`px-4 py-2 rounded-md mr-2 whitespace-nowrap ${
            selectedCategory === null 
              ? 'bg-htb-green text-black font-bold' 
              : 'bg-htb-card hover:bg-opacity-80'
          }`}
          onClick={() => setSelectedCategory(null)}
        >
          All Rewards
        </button>
        
        {categories.map(category => (
          <button 
            key={category}
            className={`px-4 py-2 rounded-md mr-2 whitespace-nowrap ${
              selectedCategory === category 
                ? 'bg-htb-green text-black font-bold' 
                : 'bg-htb-card hover:bg-opacity-80'
            }`}
            onClick={() => setSelectedCategory(category)}
          >
            {category}
          </button>
        ))}
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {displayRewards.map(reward => {
          const canAfford = points >= reward.points;
          
          return (
            <div 
              key={reward.id} 
              className={`bg-htb-card rounded-lg overflow-hidden border ${
                canAfford ? 'border-htb-border' : 'border-gray-700 opacity-70'
              }`}
            >
              <div className="h-32 bg-htb-darker flex items-center justify-center text-5xl">
                {reward.icon}
              </div>
              <div className="p-4">
                <div className="text-xs text-gray-400 mb-1">{reward.brand}</div>
                <h3 className="font-bold mb-2">{reward.title}</h3>
                <p className="text-sm text-gray-400 mb-4">{reward.description}</p>
                <div className="flex justify-between items-center">
                  <div className="text-htb-green font-bold">{reward.points} points</div>
                  <button 
                    className={`px-4 py-2 rounded-md ${
                      canAfford 
                        ? 'bg-htb-green text-black font-bold hover:bg-opacity-90' 
                        : 'bg-gray-700 text-gray-400 cursor-not-allowed'
                    }`}
                    disabled={!canAfford}
                  >
                    {canAfford ? 'Redeem' : 'Not Enough Points'}
                  </button>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default RewardsMarketplace;
